@file:Suppress("LeakingThis") // Following official Gradle guidance

package com.varabyte.kobwebx.gradle.markdown

import org.commonmark.ext.gfm.tables.*
import org.commonmark.node.*
import org.gradle.api.provider.Property

abstract class MarkdownConfig {
    /**
     * The path to all markdown resources to process.
     *
     * This path should live in the root of the project's `resources` folder, e.g. `src/jsMain/resources`
     */
    abstract val markdownPath: Property<String>

    init {
        markdownPath.convention("markdown")
    }
}

/**
 * List feature extensions to markdown that this plugin supports.
 *
 * This block will be nested under [MarkdownConfig], e.g.
 *
 * ```
 * kobwebx {
 *   markdown {
 *     features { ... }
 *   }
 * }
 * ```
 */
abstract class MarkdownFeatures {
    /**
     * If true, convert URLs and email addresses into links automatically.
     *
     * See also: https://github.com/commonmark/commonmark-java#autolink
     */
    abstract val autolink: Property<Boolean>

    /**
     * If true, support front matter (a header YAML block at the top of your markdown file with key/value pairs)
     *
     * See also: https://github.com/commonmark/commonmark-java#yaml-front-matter
     */
    abstract val frontMatter: Property<Boolean>

    /**
     * If true, support creating tables via pipe syntax.
     *
     * See also: https://github.com/commonmark/commonmark-java#tables
     * See also: https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables
     */
    abstract val tables: Property<Boolean>

    /**
     * If true, support creating task list items via a convenient syntax:
     *
     * ```
     * - [ ] task #1
     * - [x] task #2
     * ```
     *
     * See also: https://github.com/commonmark/commonmark-java#task-list-items
     */
    abstract val taskList: Property<Boolean>

    init {
        autolink.convention(true)
        frontMatter.convention(true)
        tables.convention(true)
        taskList.convention(true)
    }
}

/**
 * Specify which composable components should be used to render various html tags generated by the markdown parser.
 *
 * This block will be nested under [MarkdownConfig], e.g.
 *
 * ```
 * kobwebx {
 *   markdown {
 *     components { ... }
 *   }
 * }
 * ```
 */
abstract class MarkdownComponents {
    abstract val text: Property<(Text) -> String>
    abstract val img: Property<(Image) -> String>
    abstract val h1: Property<(Heading) -> String>
    abstract val h2: Property<(Heading) -> String>
    abstract val h3: Property<(Heading) -> String>
    abstract val h4: Property<(Heading) -> String>
    abstract val h5: Property<(Heading) -> String>
    abstract val h6: Property<(Heading) -> String>
    abstract val p: Property<(Paragraph) -> String>
    abstract val br: Property<(HardLineBreak) -> String>
    abstract val a: Property<(Link) -> String>
    abstract val em: Property<(Emphasis) -> String>
    abstract val strong: Property<(StrongEmphasis) -> String>
    abstract val hr: Property<(ThematicBreak) -> String>
    abstract val ul: Property<(BulletList) -> String>
    abstract val ol: Property<(OrderedList) -> String>
    abstract val li: Property<(ListItem) -> String>
    abstract val code: Property<(FencedCodeBlock) -> String>
    abstract val inlineCode: Property<(Code) -> String>
    abstract val table: Property<(TableBlock) -> String>
    abstract val thead: Property<(TableHead) -> String>
    abstract val tbody: Property<(TableBody) -> String>
    abstract val tr: Property<(TableRow) -> String>
    abstract val td: Property<(TableCell) -> String>
    abstract val th: Property<(TableCell) -> String>

    init {
        text.convention { text -> "org.jetbrains.compose.web.dom.Text(\"${text.literal}\")" }
        img.convention{ "org.jetbrains.compose.web.dom.Img" }
        h1.convention{ "org.jetbrains.compose.web.dom.H1" }
        h2.convention{ "org.jetbrains.compose.web.dom.H2" }
        h3.convention{ "org.jetbrains.compose.web.dom.H3" }
        h4.convention{ "org.jetbrains.compose.web.dom.H4" }
        h5.convention{ "org.jetbrains.compose.web.dom.H5" }
        h6.convention{ "org.jetbrains.compose.web.dom.H6" }
        p.convention{ "org.jetbrains.compose.web.dom.P" }
        br.convention{ "org.jetbrains.compose.web.dom.Br" }
        a.convention { link -> "org.jetbrains.compose.web.dom.A(\"${link.destination}\")" }
        em.convention{ "org.jetbrains.compose.web.dom.Em" }
        strong.convention{ "org.jetbrains.compose.web.dom.B" }
        hr.convention{ "org.jetbrains.compose.web.dom.Hr" }
        ul.convention{ "org.jetbrains.compose.web.dom.Ul" }
        ol.convention{ "org.jetbrains.compose.web.dom.Ol" }
        li.convention{ "org.jetbrains.compose.web.dom.Li" }
        code.convention{ "org.jetbrains.compose.web.dom.Code()" }
        inlineCode.convention{ code -> "org.jetbrains.compose.web.dom.Code { ${text.get().invoke(Text(code.literal))} }" }
        table.convention{ "org.jetbrains.compose.web.dom.Table" }
        thead.convention{ "org.jetbrains.compose.web.dom.Thead" }
        tbody.convention{ "org.jetbrains.compose.web.dom.Tbody" }
        tr.convention{ "org.jetbrains.compose.web.dom.Tr" }
        td.convention{ "org.jetbrains.compose.web.dom.Td" }
        th.convention{ "org.jetbrains.compose.web.dom.Th" }
    }
}